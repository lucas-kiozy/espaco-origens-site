---
import NavLink from './ui/NavLink.astro';
import Button from './ui/Button.astro';

function withBase(path: string) {
  const base = import.meta.env.BASE_URL || '/';
  // Garante que base termina com barra e path não começa com barra
  const b = base.endsWith('/') ? base : base + '/';
  const p = path.startsWith('/') ? path.slice(1) : path;
  return b + p;
}
---

<header class="sticky top-0 z-50 border-b border-areia/70 bg-creme/80 backdrop-blur">
  <nav class="max-w-6xl mx-auto px-4 h-16 flex items-center justify-between">
    <!-- logo + wordmark -->
    <a href={withBase('/')} class="flex items-center gap-2">
      <img src={withBase('/images/logo.png')} alt="Espaço Origens" class="h-9 w-9 rounded-full" width="38" height="38" />
      <span class="lowercase font-medium tracking-wide text-marrom">espaço origens</span>
    </a>

    <!-- menu desktop -->
    <div class="hidden md:flex items-center gap-1">
      <NavLink href="/" label="início" />
      <NavLink href="/sobre" label="sobre" />
      <NavLink href="/contato" label="contato" />
    </div>

    <!-- auth (desktop) -->
    <div class="hidden md:flex items-center">
      <div id="loginDesk">
        <Button href={withBase('/login')} variant="primary" size="sm">entrar</Button>
      </div>
      <div id="logoutDesk" class="hidden">
        <Button variant="outline" size="sm" id="logoutBtnDesk">sair</Button>
      </div>
    </div>

    <!-- hambúrguer -->
    <button
      id="menuBtn"
      type="button"
      class="md:hidden inline-flex items-center justify-center h-10 w-10 rounded-xl text-marrom ring-1 ring-terracota/50 bg-creme/90 hover:bg-areia/60 relative z-[60] pointer-events-auto touch-manipulation"
      aria-label="abrir menu"
      aria-controls="mobileNav"
      aria-expanded="false"
    >
      <svg viewBox="0 0 24 24" class="h-6 w-6" aria-hidden="true">
        <path d="M4 7h16M4 12h16M4 17h16" stroke="currentColor" stroke-width="2" stroke-linecap="round" fill="none"/>
      </svg>
    </button>
  </nav>

  <!-- menu mobile -->
  <div id="mobileNav" class="md:hidden hidden border-t border-areia/70 bg-creme" aria-hidden="true">
    <div class="max-w-6xl mx-auto px-4 py-3 flex flex-col gap-2">
      <NavLink href="/" label="início" />
      <NavLink href="/sobre" label="sobre" />
      <NavLink href="/contato" label="contato" />

      <div id="loginMob">
        <Button href={withBase('/login')} variant="primary" class="mt-1">entrar</Button>
      </div>
      <div id="logoutMob" class="hidden">
        <Button variant="outline" id="logoutBtnMob" class="mt-1">sair</Button>
      </div>
    </div>
  </div>

  <script is:inline>
    const btn = document.getElementById('menuBtn');
    const nav = document.getElementById('mobileNav');

    let isOpen = false;
    let suppressNextDocClick = false;

    function setOpen(v) {
      isOpen = v;
      if (!nav || !btn) return;
      nav.classList.toggle('hidden', !v);
      btn.setAttribute('aria-expanded', String(v));
      nav.setAttribute('aria-hidden', String(!v));
    }
    function toggle() { setOpen(!isOpen); }

    // abre/fecha pelo botão
    const onBtnActivate = (e) => {
      e.preventDefault();
      suppressNextDocClick = true; // ignora o clique que borbulha para document
      toggle();
    };
    btn?.addEventListener('click', onBtnActivate);
    btn?.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); onBtnActivate(e); }
    });

    // clique fora fecha (ignorando o evento que veio do próprio botão)
    document.addEventListener('click', (e) => {
      if (!isOpen) return;
      if (suppressNextDocClick) { suppressNextDocClick = false; return; }
      const t = e.target;
      if (!(t instanceof Element)) return;
      if (!nav.contains(t) && !btn.contains(t)) setOpen(false);
    });

    // clicar em link do menu fecha
    nav?.addEventListener('click', (e) => {
      const t = e.target;
      if (t instanceof Element && t.closest('a')) setOpen(false);
    });

    // fecha ao mudar para desktop
    const mq = window.matchMedia('(min-width: 768px)');
    (mq.addEventListener
      ? mq.addEventListener('change', (ev) => ev.matches && setOpen(false))
      : (mq.onchange = (ev) => ev.matches && setOpen(false)));

    // ---- login/logout com Supabase ----
    let currentUser = null;

    function getAuthClientPath() {
      return getBaseHref() + '/scripts/auth-client.js';
    }

    async function checkAuth() {
      try {
        const scriptPath = getAuthClientPath();
        console.log('[Header] Tentando importar', scriptPath, 'para checkAuth...');
        const { getCurrentUser } = await import(/* @vite-ignore */ scriptPath);
        currentUser = await getCurrentUser();
        console.log('[Header] Usuário atual:', currentUser);
        syncAuthUI();
      } catch (error) {
        console.error('[Header] Erro ao importar ou checar auth:', error);
        currentUser = null;
        syncAuthUI();
      }
    }

    function syncAuthUI() {
      const loginDesk = document.getElementById('loginDesk');
      const logoutDesk = document.getElementById('logoutDesk');
      const loginMob  = document.getElementById('loginMob');
      const logoutMob = document.getElementById('logoutMob');
      const logged = !!currentUser;
      console.log('[Header] Sincronizando UI. Usuário logado?', logged);
      loginDesk?.classList.toggle('hidden', logged);
      logoutDesk?.classList.toggle('hidden', !logged);
      loginMob?.classList.toggle('hidden', logged);
      logoutMob?.classList.toggle('hidden', !logged);
    }

    // base a partir da <base href="..."> (evita usar import.meta no browser)
    function getBaseHref() {
      const href = document.querySelector('base')?.getAttribute('href') || '/';
      return href.replace(/\/+$/, '');
    }

    async function doLogout() {
      try {
        const scriptPath = getAuthClientPath();
        console.log('[Header] Tentando importar', scriptPath, 'para logout...');
        const { signOut } = await import(/* @vite-ignore */ scriptPath);
        await signOut();
        currentUser = null;
        syncAuthUI();
        const home = getBaseHref();
        if (!location.pathname.startsWith(home)) location.href = home + '/';
        setOpen(false);
      } catch (error) {
        console.error('[Header] Erro ao fazer logout:', error);
      }
    }

    document.getElementById('logoutBtnDesk')?.addEventListener('click', doLogout);
    document.getElementById('logoutBtnMob')?.addEventListener('click', doLogout);

    // Verificar autenticação ao carregar
    document.addEventListener('DOMContentLoaded', () => {
      console.log('[Header] DOMContentLoaded - iniciando checkAuth');
      checkAuth();
    });

    // Escutar mudanças de autenticação
    {
      const scriptPath = getAuthClientPath();
      import(/* @vite-ignore */ scriptPath).then(({ onAuthStateChange }) => {
        console.log('[Header] onAuthStateChange registrado');
        onAuthStateChange((user) => {
          console.log('[Header] Mudança de auth detectada. Novo usuário:', user);
          currentUser = user;
          syncAuthUI();
        });
      }).catch(e => {
        console.error('[Header] Falha ao importar onAuthStateChange:', e);
      });
    }

    // Forçar rechecagem se acabou de logar
    if (localStorage.getItem('justLoggedIn')) {
      localStorage.removeItem('justLoggedIn');
      setTimeout(() => {
        console.log('[Header] Forçando rechecagem após login');
        checkAuth();
      }, 1000); // delay aumentado para 1000ms
    }
  </script>
</header>
