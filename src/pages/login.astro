---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Button from '../components/ui/Button.astro';

const meta = {
  title: 'entrar - espaço origens',
  description:
    'acesse sua conta em espaço origens para acompanhar pedidos e ver favoritos.',
};
---

<Layout title={meta.title} description={meta.description}>
  <Header />

  <main class="flex items-center justify-center min-h-[calc(85vh-8rem)] px-4 py-12">
    <section class="w-full max-w-md bg-areia/40 border border-areia/70 rounded-2xl shadow-sm p-6">
      <h1 class="text-2xl lowercase text-marrom mb-2">entrar</h1>
      <p class="text-marrom/80 mb-4 text-sm">
        use seu email e senha. você poderá acompanhar pedidos e ver suas obras favoritas.
      </p>

      <form id="loginForm" novalidate>
        <div>
          <label for="email">email</label>
          <input
            id="email" name="email" type="email" required
            placeholder="nome@exemplo.com" autocomplete="email" />
        </div>

        <div>
          <label for="password">senha</label>
          <input
            id="password" name="password" type="password" required minlength="6"
            placeholder="sua senha" autocomplete="current-password" />
        </div>

        <Button type="submit" class="btn-primary">entrar</Button>
        <a href="?signup=true" class="recover-link">criar conta</a>
        <a href="#" class="recover-link">recuperar conta</a>

        <p id="feedback" class="text-sm mt-2 text-cinza" aria-live="polite"></p>
      </form>
    </section>
  </main>

  <Footer />

  <script>
    // @ts-nocheck

    (function () {
      const form = document.getElementById('loginForm');
      const fb = document.getElementById('feedback');
      const isSignUp = window.location.search.includes('signup=true');

      // Ajuste do título/botão quando é cadastro
      if (isSignUp) {
        const title = document.querySelector('h1');
        const button = document.querySelector('button[type="submit"]');
        const recoverLink = document.querySelector('.recover-link');
        if (title) title.textContent = 'criar conta';
        if (button) button.textContent = 'criar conta';
        if (recoverLink) recoverLink.textContent = 'já tem conta? entrar';
      }

      function setFeedback(text) {
        if (fb) fb.textContent = text || '';
      }

      // Mapeia mensagens de erro do Supabase para PT-BR
      function mapAuthError(op, rawErr) {
        const msg = String(
          (rawErr && (rawErr.message || rawErr.error_description)) || rawErr || ''
        ).toLowerCase();

        if (
          (msg.includes('already') && (msg.includes('exist') || msg.includes('registered'))) ||
          msg.includes('duplicate')
        ) {
          return 'usuário já existe. faça login ou recupere a senha';
        }
        if (msg.includes('invalid login credentials')) {
          return 'email ou senha incorretos';
        }
        if (msg.includes('invalid email')) {
          return 'email inválido. verifique e tente novamente';
        }
        if (msg.includes('password should be at least') || msg.includes('at least')) {
          return 'a senha deve ter pelo menos 6 caracteres';
        }
        if (msg.includes('not confirmed')) {
          return 'confirme seu email antes de entrar';
        }
        if (msg.includes('over_email_send_rate_limit') || msg.includes('rate limit')) {
          return 'muitas tentativas. aguarde alguns minutos';
        }
        if (op === 'signup') return 'erro ao criar conta. tente novamente';
        if (op === 'signin') return 'erro ao fazer login. tente novamente';
        return 'ocorreu um erro. tente novamente';
      }

      form?.addEventListener('submit', async (ev) => {
        ev.preventDefault();

        const emailEl = document.getElementById('email');
        const pwdEl = document.getElementById('password');
        const email = (emailEl && emailEl.value ? emailEl.value : '').trim();
        const pwd = (pwdEl && pwdEl.value) || '';

        if (!email || !pwd || pwd.length < 6) {
          return setFeedback('verifique seu email e senha (mín. 6 caracteres)');
        }

        try {
          setFeedback(isSignUp ? 'criando conta...' : 'entrando...');

          const { signIn, signUp } = await import('../lib/auth.ts');

          if (isSignUp) {
            // signUp retorna { data, error }
            const res = await signUp(email, pwd);

            if (res && res.error) {
              return setFeedback(mapAuthError('signup', res.error));
            }

            setFeedback('conta criada! verifique seu email para confirmar.');
          } else {
            try {
              await signIn(email, pwd);
              setFeedback('bem-vindo! redirecionando…');
              localStorage.setItem('justLoggedIn', '1');
              const base = (import.meta && import.meta.env && import.meta.env.BASE_URL) || '/';
              setTimeout(() => { window.location.href = base; }, 1000);
            } catch (err) {
              return setFeedback(mapAuthError('signin', err));
            }
          }
        } catch (err) {
          setFeedback(mapAuthError(isSignUp ? 'signup' : 'signin', err));
        }
      });

      const links = document.querySelectorAll('.recover-link');

      // 1º link: criar conta / já tem conta
      links[0]?.addEventListener('click', (ev) => {
        ev.preventDefault();
        if (isSignUp) {
          window.location.href = window.location.pathname;
        } else {
          window.location.href = window.location.pathname + '?signup=true';
        }
      });

      // 2º link: recuperar conta
      links[1]?.addEventListener('click', async (ev) => {
        ev.preventDefault();

        const emailEl = document.getElementById('email');
        const email = (emailEl && emailEl.value ? emailEl.value : '').trim();
        if (!email) return setFeedback('digite seu email primeiro');

        try {
          setFeedback('enviando email de recuperação...');
          const { resetPassword } = await import('../lib/auth.ts');
          await resetPassword(email);
          setFeedback('email de recuperação enviado!');
        } catch (err) {
          const m = String((err && err.message) || '').toLowerCase();
          if (m.includes('rate limit')) {
            setFeedback('muitas tentativas. aguarde alguns minutos');
          } else {
            setFeedback('erro ao enviar email de recuperação');
          }
        }
      });
    })();
  </script>
</Layout>
