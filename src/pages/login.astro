---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Button from '../components/ui/Button.astro';

const meta = {
  title: 'entrar - espaço origens',
  description: 'acesse sua conta em espaço origens para acompanhar pedidos e ver favoritos.',
};
---

<Layout title={meta.title} description={meta.description}>
  <Header />

  <main class="flex items-center justify-center min-h-[calc(85vh-8rem)] px-4 py-12">
    <section class="w-full max-w-md bg-areia/40 border border-areia/70 rounded-2xl shadow-sm p-6">
      <h1 class="text-2xl lowercase text-marrom mb-2">entrar</h1>
      <p class="text-marrom/80 mb-4 text-sm">
        use seu email e senha. você poderá acompanhar pedidos e ver suas obras favoritas.
      </p>

      <form id="loginForm" novalidate>
        <div>
          <label for="email">email</label>
          <input
            id="email"
            name="email"
            type="email"
            required
            placeholder="nome@exemplo.com"
            autocomplete="email"
          />
        </div>

        <div>
          <label for="password">senha</label>
          <input
            id="password"
            name="password"
            type="password"
            required
            minlength="6"
            placeholder="sua senha"
            autocomplete="current-password"
          />
        </div>

        <Button type="submit" class="btn-primary">entrar</Button>
        <a href="?signup=true" class="recover-link">criar conta</a>
        <a href="#" class="recover-link">recuperar conta</a>

        <p id="feedback" class="text-sm mt-2 text-cinza" aria-live="polite"></p>
      </form>
    </section>
  </main>

  <Footer />

  <script type="module">
    // @ts-nocheck

    const form = document.getElementById('loginForm');
    const fb = document.getElementById('feedback');

    const isSignUp =
      new URLSearchParams(window.location.search).get('signup') === 'true' ||
      window.location.search.includes('signup=true');

    // Ajusta UI quando for cadastro
    if (isSignUp) {
      const title = document.querySelector('h1');
      const button = document.querySelector('button[type="submit"]');
      const firstRecover = document.querySelector('.recover-link');
      if (title) title.textContent = 'criar conta';
      if (button) button.textContent = 'criar conta';
      if (firstRecover) firstRecover.textContent = 'já tem conta? entrar';
    }

    function setFeedback(text) {
      if (fb) fb.textContent = text;
    }

    function mapSignupErrorMessage(msg) {
      const m = String(msg || '').toLowerCase();
      if (m.includes('already registered') || m.includes('already exists') || m.includes('duplicate')) {
        return 'usuário já existe. faça login ou recupere a senha';
      }
      if (m.includes('invalid email')) return 'email inválido. verifique e tente novamente';
      if (m.includes('at least')) return 'a senha deve ter pelo menos 6 caracteres';
      if (m.includes('over_email_send_rate_limit') || m.includes('rate limit'))
        return 'muitas tentativas. aguarde alguns minutos';
      if (m.includes('unexpected_failure')) return 'erro temporário. tente novamente em alguns minutos';
      return 'erro ao criar conta. tente novamente';
    }

    function mapLoginErrorMessage(msg) {
      const m = String(msg || '').toLowerCase();
      if (m.includes('invalid login credentials')) return 'email ou senha incorretos';
      if (m.includes('user not confirmed')) return 'confirme seu email antes de entrar';
      if (m.includes('error sending confirmation email'))
        return 'erro ao enviar email de confirmação. tente novamente em alguns minutos';
      if (m.includes('over_email_send_rate_limit') || m.includes('rate limit'))
        return 'muitas tentativas. aguarde alguns minutos';
      if (m.includes('unexpected_failure')) return 'erro temporário. tente novamente em alguns minutos';
      return 'erro ao fazer login. tente novamente';
    }

    async function handleSubmit(e) {
      e.preventDefault();

      const emailEl = document.getElementById('email');
      const pwdEl = document.getElementById('password');

      const email = String(emailEl && emailEl.value || '').trim();
      const pwd = String(pwdEl && pwdEl.value || '');

      if (!email || !pwd || pwd.length < 6) {
        setFeedback('verifique seu email e senha (mín. 6 caracteres)');
        return;
      }

      try {
        setFeedback(isSignUp ? 'criando conta...' : 'entrando...');

        if (isSignUp) {
          const { signUp } = await import('../lib/auth.ts');
          const res = await signUp(email, pwd); // { data, error }

          if (res && res.error) {
            setFeedback(mapSignupErrorMessage(res.error.message || res.error));
            return;
          }

          // Heurística: se não houve error, mas também não veio user,
          // é muito provável que o e-mail já exista/confirmado.
          const user = res && res.data && res.data.user;
          if (!user) {
            setFeedback('usuário já existe. faça login ou recupere a senha');
            return;
          }

          setFeedback('conta criada! verifique seu email para confirmar.');
          return;
        }

        // Login
        const { signIn } = await import('../lib/auth.ts');
        await signIn(email, pwd);

        setFeedback('bem-vindo! redirecionando…');
        localStorage.setItem('justLoggedIn', '1');
        setTimeout(() => {
          window.location.href = import.meta.env.BASE_URL;
        }, 1000);
      } catch (err) {
        const message = (err && err.message) ? err.message : err;
        if (isSignUp) setFeedback(mapSignupErrorMessage(message));
        else setFeedback(mapLoginErrorMessage(message));
      }
    }

    form && form.addEventListener('submit', handleSubmit);

    // Links auxiliares
    const links = document.querySelectorAll('.recover-link');

    // Alternar login/signup
    if (links[0]) {
      links[0].addEventListener('click', (e) => {
        e.preventDefault();
        if (isSignUp) {
          window.location.href = window.location.pathname;
        } else {
          const url = new URL(window.location.href);
          url.searchParams.set('signup', 'true');
          window.location.href = url.toString();
        }
      });
    }

    // Recuperar senha
    if (links[1]) {
      links[1].addEventListener('click', async (e) => {
        e.preventDefault();

        const emailEl = document.getElementById('email');
        const email = String(emailEl && emailEl.value || '');

        if (!email) {
          setFeedback('digite seu email primeiro');
          return;
        }

        try {
          setFeedback('enviando email de recuperação...');
          const { resetPassword } = await import('../lib/auth.ts');
          await resetPassword(email);
          setFeedback('email de recuperação enviado!');
        } catch (err) {
          const message = (err && err.message) ? err.message : err;
          if (String(message).toLowerCase().includes('rate limit')) {
            setFeedback('muitas tentativas. aguarde alguns minutos');
          } else {
            setFeedback('erro ao enviar email de recuperação');
          }
        }
      });
    }
  </script>
</Layout>
