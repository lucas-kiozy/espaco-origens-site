---
/**
 * Página de Login (stub para futura integração).
 * - Formulário acessível (email + senha).
 * - Ao enviar, simula login salvando localStorage.auth="1" e userEmail.
 * - Depois redireciona para a home.
 * - Mantém paleta e semântica para SEO.
 * - Compatível com GitHub Pages (prefixo base em assets).
 */

import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Button from '../components/ui/Button.astro';

// Função auxiliar para prefixar a BASE_URL
const asset = (path: string) => `${import.meta.env.BASE_URL}${path.replace(/^\/+/, '')}`;

const meta = {
  title: 'entrar - espaço origens',
  description: 'acesse sua conta em espaço origens para acompanhar pedidos e ver favoritos.',
};
---

<Layout title={meta.title} description={meta.description}>
  <Header />

  <main class="flex items-center justify-center min-h-[calc(85vh-8rem)] px-4 py-12">
    <section class="w-full max-w-md bg-areia/40 border border-areia/70 rounded-2xl shadow-sm p-6">
      <h1 class="text-2xl lowercase text-marrom mb-2">entrar</h1>
      <p class="text-marrom/80 mb-4 text-sm">
        use seu email e senha. quando a loja estiver ativa, você poderá acompanhar pedidos e favoritos.
      </p>

      <!-- formulário de login -->
      <form id="loginForm" novalidate>
        <!-- campo email -->
        <div>
          <label for="email">email</label>
          <input
            id="email" name="email" type="email" required
            placeholder="nome@exemplo.com"
            autocomplete="email"
          />
        </div>

        <!-- campo senha -->
        <div>
          <label for="password">senha</label>
          <input
            id="password" name="password" type="password" required minlength="6"
            placeholder="sua senha"
            autocomplete="current-password"
          />
        </div>

        <!-- botão e link -->
        <Button type="submit" class="btn-primary">entrar</Button>
        <a href="?signup=true" class="recover-link">criar conta</a>
        <a href="#" class="recover-link">recuperar conta</a>

        <!-- feedback -->
        <p id="feedback" class="text-sm mt-2 text-cinza" aria-live="polite"></p>
      </form>
    </section>
  </main>

  <Footer />

  <!-- Script de login com Supabase -->
  <script>
    const form = document.getElementById('loginForm');
    const fb   = document.getElementById('feedback');
    const isSignUp = window.location.search.includes('signup=true');

    // Atualizar título e botão se for registro
    if (isSignUp) {
      const title = document.querySelector('h1');
      const button = document.querySelector('button[type="submit"]');
      const recoverLink = document.querySelector('.recover-link');
      
      if (title) title.textContent = 'criar conta';
      if (button) button.textContent = 'criar conta';
      if (recoverLink) recoverLink.textContent = 'já tem conta? entrar';
    }

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const emailEl = document.getElementById('email');
      const pwdEl   = document.getElementById('password');

      if (!(emailEl instanceof HTMLInputElement) || !(pwdEl instanceof HTMLInputElement)) {
        if (fb) fb.textContent = 'erro no formulário. tente novamente';
        return;
      }

      const email = emailEl.value.trim();
      const pwd   = pwdEl.value;

      if (!email || !pwd || pwd.length < 6) {
        if (fb) fb.textContent = 'verifique seu email e senha (mín. 6 caracteres)';
        return;
      }

      try {
        if (fb) fb.textContent = isSignUp ? 'criando conta...' : 'entrando...';

        // Importar funções dinamicamente
        const { signIn, signUp } = await import('../lib/auth.ts');

        if (isSignUp) {
          await signUp(email, pwd);
          if (fb) fb.textContent = 'conta criada! verifique seu email para confirmar.';
        } else {
          await signIn(email, pwd);
          if (fb) fb.textContent = 'bem-vindo! redirecionando…';
          setTimeout(() => { 
            window.location.href = import.meta.env.BASE_URL; 
          }, 1000);
        }
      } catch (error) {
        console.error('Auth error:', error);
        if (fb) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          if (errorMessage.includes('Invalid login credentials')) {
            fb.textContent = 'email ou senha incorretos';
          } else if (errorMessage.includes('User already registered')) {
            fb.textContent = 'usuário já existe. faça login ou recupere a senha';
          } else if (errorMessage.includes('Error sending confirmation email')) {
            fb.textContent = 'erro ao enviar email de confirmação. tente novamente em alguns minutos';
          } else if (errorMessage.includes('rate limit') || errorMessage.includes('over_email_send_rate_limit')) {
            fb.textContent = 'muitas tentativas. aguarde alguns minutos';
          } else if (errorMessage.includes('unexpected_failure')) {
            fb.textContent = 'erro temporário. tente novamente em alguns minutos';
          } else {
            fb.textContent = 'erro ao fazer login. tente novamente';
          }
        }
      }
    });

    // Links de ação
    const recoverLinks = document.querySelectorAll('.recover-link');
    
    // Primeiro link: "criar conta" ou "já tem conta? entrar"
    recoverLinks[0]?.addEventListener('click', (e) => {
      e.preventDefault();
      if (isSignUp) {
        // Se estiver na página de signup, voltar para login
        window.location.href = window.location.pathname;
      } else {
        // Se estiver na página de login, ir para signup
        window.location.href = window.location.pathname + '?signup=true';
      }
    });
    
    // Segundo link: "recuperar conta"
    recoverLinks[1]?.addEventListener('click', async (e) => {
      e.preventDefault();
      
      const email = (document.getElementById('email') as HTMLInputElement)?.value;
      if (!email) {
        if (fb) fb.textContent = 'digite seu email primeiro';
        return;
      }

      try {
        if (fb) fb.textContent = 'enviando email de recuperação...';
        const { resetPassword } = await import('../lib/auth.ts');
        await resetPassword(email);
        if (fb) fb.textContent = 'email de recuperação enviado!';
      } catch (error) {
        console.error('Reset password error:', error);
        if (fb) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          if (errorMessage.includes('rate limit')) {
            fb.textContent = 'muitas tentativas. aguarde alguns minutos';
          } else {
            fb.textContent = 'erro ao enviar email de recuperação';
          }
        }
      }
    });
  </script>
</Layout>
